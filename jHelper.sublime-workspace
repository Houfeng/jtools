{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"n",
				"namespace"
			],
			[
				"mo",
				"mokit"
			],
			[
				"bor",
				"border-radius"
			],
			[
				"t",
				"this	$(this)"
			],
			[
				"fu",
				"function_name"
			],
			[
				"j",
				"jQuery.ajaxSetup	jQuery.ajaxSetup"
			],
			[
				"p",
				"plugin	plugin (animation)"
			],
			[
				"f",
				"for	for (…) {…} (Improved Native For-Loop)"
			],
			[
				"r",
				"rgba()"
			],
			[
				"ba",
				"background"
			],
			[
				"tm",
				"Terminal"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "/**\n * @description OOP模块，为JS提供OOP机制，拥有完整的继承，多态，封装等面向对象特性。\n * @author      侯锋\n * @email       admin@xhou.net\n * @blog        http://www.houfeng.net\n */\n\n/**\n * 核心辅助方法\n * @type {Object}\n */\n$helper = {\n    /**\n     * 除去字符串两端的空格\n     * @param  {String} str 源字符串\n     * @return {String}     结果字符串\n     */\n    trim: function(str) {\n        if (str && str.trim) return str.trim();\n        else return str.replace(/(^[\\\\s]*)|([\\\\s]*$)/g, \"\");\n    },\n    /**\n     * 验证一个对象是否为NULL\n     * @param  {Object}  obj 要验证的对象\n     * @return {Boolean}     结果\n     */\n    isNull: function(obj) {\n        return obj == null;\n    },\n    /**\n     * 验证一个对象是否为Function\n     * @param  {Object}  obj 要验证的对象\n     * @return {Boolean}     结果\n     */\n    isFunction: function(obj) {\n        return typeof obj === \"function\";\n    },\n    /**\n     * 验证一个对象是否为String\n     * @param  {Object}  obj 要验证的对象\n     * @return {Boolean}     结果\n     */\n    isString: function(obj) {\n        return typeof obj === 'string';\n    },\n    /**\n     * 验证一个对象是否为Number\n     * @param  {Object}  obj 要验证的对象\n     * @return {Boolean}     结果\n     */\n    isNumber: function(obj) {\n        return typeof obj === 'number';\n    },\n    /**\n     * 验证一个对象是否为HTML Element\n     * @param  {Object}  obj 要验证的对象\n     * @return {Boolean}     结果\n     */\n    isElement: function(obj) {\n        if (window.Element) return obj instanceof Element;\n        else return (obj.tagName && obj.nodeType && obj.nodeName && obj.attributes && obj.ownerDocument);\n    },\n    /**\n     * 验证一个对象是否为HTML Text Element\n     * @param  {Object}  obj 要验证的对象\n     * @return {Boolean}     结果\n     */\n    isText: function(obj) {\n        return obj instanceof Text;\n    },\n    /**\n     * 验证一个对象是否为Object\n     * @param  {Object}  obj 要验证的对象\n     * @return {Boolean}     结果\n     */\n    isObject: function(obj) {\n        return typeof obj === \"object\";\n    },\n    /**\n     * 验证一个对象是否为Array或伪Array\n     * @param  {Object}  obj 要验证的对象\n     * @return {Boolean}     结果\n     */\n    isArray: function(obj) {\n        if (!obj) return false;\n        var _isArray = ((obj instanceof Array) || (!this.isString(obj) && obj.length && this.isNumber(obj.length)));\n        return _isArray;\n    },\n    /**\n     * 遍历一个对像或数组\n     * @param  {Object or Array}   obj  要遍历的数组或对象\n     * @param  {Function} fn            处理函数\n     * @return {void}                   无返回值\n     */\n    each: function(obj, fn) {\n        if (this.isArray(obj)) {\n            for (var i = 0; i < obj.length; i++)\n            fn.call(obj[i], i);\n        } else {\n            for (var i in obj)\n            if ($helper.isFunction(fn)) fn.call(obj[i], i);\n        }\n        return obj;\n    },\n    /**\n     * 抛出一个异常\n     * @param  {String} msg 异常信息\n     * @return {void}       无返回值\n     */\n    throwError: function(msg) {\n        //alert(msg);\n    }\n};\n\n/**\n * 定义一个class(类)\n * @param  {Object} params 类的实现\n * @return {Class}         类型\n */\n\nfunction $class(params) {\n    /**\n     * 类\n     * @return {Object} 返回值\n     */\n    var newClass = function() {\n            var me = this;\n            //改变父类的作用域，判断父类类型的向个系统函数不能改变作用域\n            if (me.$base) {\n                for (var name in me.$base) {\n                    if (name != \"$is\" && name != \"$base\" && name != \"$type\" && name != \"$baseType\" && $helper.isFunction(me.$base[name])) {\n                        var func = me.$base[name];\n                        me.$base[name] = function() {\n                            return func.apply(me, arguments);\n                        }\n                    }\n                }\n            }\n            //定义$type\n            me.$type = newClass;\n            /**\n             * 判断实例是否是指定class(类)\n             * @param  {Class} t   类型\n             * @return {Boolern}   bool结果\n             */\n            me.$is = function(t) {\n                return me.$type === t || me.$baseType === t || (me.$base != null && me.$base.$is != null && me.$base.$is(t));\n            }\n            //调用构造\n            var rs = null;\n            if (me.$init && $helper.isFunction(me.$init)) rs = me.$init.apply(me, arguments);\n            //调用扩展构造（可以理解为初始化执行的函数）\n            if (me.$initList) {\n                for (var i in me.$initList)\n                if (me.$initList[i] && $helper.isFunction(me.$initList[i])) me.$initList[i].apply(me, arguments);\n            }\n            //返回构造函数据的返回值\n            return rs;\n        };\n    /**\n     * 扩展实例功能，此方法可扩展类的实例功能\n     * @param  {Object} fns       扩展对象，包含要添加到实例的成员\n     * @param  {Boolern} internal 是否为内部调用\n     * @param  {Boolern} keepfn   如果fns是函数，是否将Function本身作为扩展\n     * @return {void}             无返回值\n     */\n    var _extend = function(fns, internal, keepfn) { //私有\n            if ($helper.isFunction(fns) && !keepfn) {\n                var _body = new fns();\n                fns = _body;\n            }\n            if (!newClass.prototype.$initList) newClass.prototype.$initList = [];\n            for (var name in fns) {\n                if (!internal && name == \"$init\" && $helper.isFunction(fns[name])) newClass.prototype.$initList.push(fns[name]);\n                else newClass.prototype[name] = fns[name];\n            }\n            return newClass;\n        };\n    /**\n     * 扩展实例功能，此方法可扩展类的实例功能\n     * @param  {Object} fns     扩展对象，包含要添加到实例的成员\n     * @param  {Boolern} keepfn 如果fns是函数，是否将Function本身作为扩展\n     * @return {void}           无返回值\n     */\n    newClass.$extend = function(fns, keepfn) {\n        _extend(fns, false, keepfn);\n    };\n    /**\n     * 扩展类功能，此方法可扩展类的静态方法\n     * @param  {Object} fns     扩展对象，包含要添加到类的成员\n     * @param  {Boolern} keepfn 如果fns是函数，是否将Function本身作为扩展\n     * @return {void}           无返回值\n     */\n    newClass.$static = function(fns, keepfn) {\n        if ($helper.isFunction(fns) && !keepfn) {\n            var _body = new fns();\n            fns = _body;\n        }\n        for (var name in fns) {\n            newClass[name] = fns[name];\n            if (name == \"$init\" && $helper.isFunction(fns[name])) newClass[name].apply(newClass);\n        }\n        return newClass;\n    };\n    /**\n     * 将成员附加到当前类中\n     */\n    if (params.$base) {\n        var base = params.$base;\n        params.$baseType = base;\n        params.$base = new base();\n        //添加\n        _extend(params.$base, true); //添加父类成员\n        _extend(params, true); //添加当前类成员\n        newClass.$static(params.$baseType, true); //添加静态成员\n    } else {\n        _extend(params, true);\n    }\n    //返回新类型\n    return newClass;\n};\n\n/**\n * 为对象定义一个事件\n * @param  {Object} src      要添加事件的对象\n * @param  {String} name     事件名称\n * @param  {$event.bindType} bindType 事件绑定类型\n * @return {Event}           定义的事件\n */\n\nfunction $event(src, name, bindType) {\n    //默认为当前对象，如果没有在一个自定义对象中使用，this指向的是window\n    var me = this;\n    //默契第一个参数据事件名，第二个为对象\n    if (src && $helper.isString(name)) me = src;\n    //为了支持第一个参数为对象，第二个参为事件名的写法\n    if (name && $helper.isString(src)) {\n        me = name;\n        name = src;\n    }\n    //事件存放列表\n    if (!me._eventList) me._eventList = {};\n    //如果事件不存则添加\n    if (!me._eventList[name]) {\n        me._eventList[name] = [];\n        //用以支持系统对象的系统事件\n        me.addEventListener = me.addEventListener ||\n        function(name, fn) {\n            if (me.attachEvent) me.attachEvent(\"on\" + name, fn);\n        };\n        me.removeEventListener = me.removeEventListener ||\n        function(name, fn) {\n            if (me.detachEvent) me.detachEvent(\"on\" + name, fn);\n        };\n        //处理绑定类型\n        if (bindType == null && bindType != 0) {\n            if ($helper.isArray(me) && !$helper.isElement(me)) bindType = $event.bindType.child;\n            else bindType = $event.bindType.self;\n        }\n        //实现对数组批量支持(支持数组及伪数组),迭代器\n        me._each = function(fn, _bindType) {\n            if ($helper.isArray(me) && !$helper.isElement(me) && $event.bindType.self != _bindType && me[0]) {\n                $helper.each(me, fn);\n            }\n            return me;\n        }\n        //如果指定的事件已经定义过，则将原有定义转存$+name形式备用\n        if (me[name]) me[\"$\" + name] = me[name];\n        /**\n         * 添加一个事件处理或触事件\n         * @param  {Function} fn  事件处理函数\n         * @param  {Object}   obj 处理函数据的作用域对象\n         * @return {void}         无返回值\n         */\n        me[name] = function(fn, obj) {\n            if (fn && $helper.isFunction(fn)) me[name].bind(fn, obj);\n            else me[name].tigger.apply(me[name], arguments);\n            return me;\n        };\n        /**\n         * 清空事件处理函数\n         * @return {void} 无返回值\n         */\n        me[name].clear = function() {\n            //如果是数组或伪数组\n            me._each(function() {\n                $event(name, this).clear();\n            }, bindType);\n            //\n            me._eventList[name] = [];\n            return me;\n        };\n        /**\n         * 验证一个处理函数是否已经添加\n         * @param  {Function} fn 处理函数\n         * @return {Boolean}     Bool值\n         */\n        me[name].has = function(fn) {\n            var list = me._eventList[name];\n            for (var i = 0; i < list.length; i++) {\n                if (list[i] == fn) return true;\n            }\n        };\n        /**\n         * 添加（绑定）一个事件处理函数\n         * @param  {Function} fn  处理函数\n         * @param  {Object}   obj 处理函数作用对象\n         * @return {void}         无运回值\n         */\n        me[name].add = me[name].bind = function(fn, obj) {\n            //如果是数组或伪数组\n            me._each(function() {\n                $event(name, this).add(fn, obj);\n            }, bindType);\n            //\n            if (me[name].has(fn) || $event.bindType.child == bindType) return me;\n            fn._src = obj;\n            me._eventList[name].push(fn);\n            //如果为系统对象支持系统事件\n            if (me.addEventListener && me.removeEventListener) {\n                fn.$invoke = function(event) {\n                    var rs = fn.apply(me, arguments);\n                    if (rs === false) { //阻止事件冒泡\n                        if (event.cancelBubble) event.cancelBubble = true;\n                        if (event.preventDefault) event.preventDefault();\n                        if (event.stopPropagation) event.stopPropagation();\n                    }\n                }\n                me.addEventListener(name, fn.$invoke);\n            }\n            return me;\n        };\n        /**\n         * 移除（解绑）一个事件处理函数\n         * @param  {Function} fn 处理函数\n         * @return {void}     无返回值\n         */\n        me[name].remove = me[name].unbind = function(fn) {\n            //如果是数组或伪数组\n            me._each(function() {\n                $event(name, this).remove(fn);\n            }, bindType);\n            //\n            if ($event.bindType.child == bindType) return me;\n            //\n            if (me.addEventListener && me.removeEventListener) {\n                me.removeEventListener(name, fn.$invoke);\n            }\n            //\n            for (var i in me._eventList[name]) {\n                if (me._eventList[name][i] = fn) me._eventList[name][i] = null;\n            }\n            return me;\n        };\n        /**\n         * 触发一个事件\n         * @return {void} 无返回值\n         */\n        me[name].tigger = me[name].fire = function() {\n            /// <summary>触发</summary>\n            var args = arguments;\n            //如果是数组或伪数组\n            me._each(function() {\n                $event(name, this).tigger.apply(this[name], args);\n            }, bindType);\n            //  \n            if (me[\"$\" + name]) {\n                me[\"$\" + name].apply(me, args);\n                return;\n            }\n            //\n            for (var i in me._eventList[name]) {\n                if (me._eventList[name][i] != null) {\n                    var src = me._eventList[name][i]._src;\n                    if (src == null) src = me;\n                    if (src) me._eventList[name][i].apply(src, args);\n                }\n            }\n            return me;\n        };\n    }\n    //返回事件\n    return me[name];\n};\n\n/**\n * 事件绑定类型\n * @type {Object}\n */\n$event.bindType = {\n    self: 0,\n    child: 1,\n    all: 2\n};\n\n/**\n * 定义一个命名空间\n * @param  {String} _namespace 命名空间名称\n * @param  {Object} _class     包含命名空间下的类定义\n * @return {Namespace}         返回定义的命名空间\n */\n\nfunction $namespace(_namespace, _class) {\n    var createNamespace = function(_name, _parentObject) {\n            _parentObject = _parentObject || window;\n            if (_parentObject[_name] == null) _parentObject[_name] = {};\n            return _parentObject[_name];\n        };\n    var parentObject = window;\n    if (_namespace && $helper.isString(_namespace)) {\n        var nameList = _namespace.split('.');\n        $helper.each(nameList, function() {\n            parentObject = createNamespace(this, parentObject);\n        });\n    } else if (_namespace) parentObject = _namespace;\n    //----\n    if (_class) {\n        $helper.each(_class, function(className) {\n            if (!parentObject[className]) parentObject[className] = this;\n            else $helper.throwError(\"'\" + className + \"' already exists\");\n        });\n    }\n    return parentObject;\n};\n\n/**\n * 引入一个命名空间\n * @param  {String} _namespace 命名空间完成名称\n * @param  {String} _shortName 短名称\n * @return {Namespace}         引入的命名空间\n */\n\nfunction $using(_namespace, _shortName) {\n    return $namespace(_shortName, $namespace(_namespace));\n}\n\n/**\n * 引入一个外部脚本\n * @param  {Array or String}   urlList  一个或多个外部脚本\n * @param  {Function} callback 引入成功回调\n * @return {void}              无返回值\n */\n\nfunction $import(urlList, callback) {\n    if (typeof urlList === \"string\") urlList = [urlList];\n    var readyCount = 0;\n    $helper.each(urlList, function() {\n        var _url = this;\n        if ($import.cache[_url]) {\n            if (callback) $import.cache[_url].callbackList.push(callback);\n            if ($import.cache[_url].ready) $import.cache[_url].load();\n            return;\n        }\n        var _script = document.createElement('script');\n        _script.src = _url;\n        _script.callbackList = [];\n        if (callback) _script.callbackList.push(callback);\n        _script.load = _script.onload || _script.onreadystatechange;\n        _script.load = $event(_script, 'load');\n        _script.load(function() {\n            var _state = this.readyState || \"loaded\";\n            if (_state == \"loaded\" || _state == \"interactive\" || _state == \"complete\") {\n                _script.ready = true;\n                readyCount++;\n                if (readyCount >= urlList.length) {\n                    $helper.each(_script.callbackList, function(i) {\n                        if (_script.callbackList[i]) _script.callbackList[i]();\n                        _script.callbackList[i] = null;\n                    });\n                }\n            }\n        });\n        $import.cache[_url] = _script;\n        var container = document.getElementsByTagName('head');\n        if (container && $helper.isArray(container)) container = container[0] || document.body;\n        else container = document.body;\n        //将script添加到页面\n        container.appendChild(_script);\n    });\n};\n/**\n * 引入缓存，用来防止重复引入\n * @type {Object}\n */\n$import.cache = {};",
			"file": "src/joop.js",
			"file_size": 17959,
			"file_write_time": 1344001629000000,
			"settings":
			{
				"buffer_size": 14851,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/YUI Compressor/YUI Compressor.sublime-build",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"pci",
				"Package Control: Install Package"
			],
			[
				"pcr",
				"Package Control: Remove Package"
			],
			[
				"pci	",
				"Package Control: Install Package"
			],
			[
				"b",
				"Bookmarks: Clear All"
			],
			[
				"bra",
				"Bookmarks: Clear All"
			],
			[
				"",
				"About"
			],
			[
				"git",
				"Git: Commit history"
			],
			[
				"zc",
				"Set Syntax: ZenCoding"
			],
			[
				"zce",
				"Zen Coding: Evaluate math expression"
			],
			[
				"z",
				"Zen Coding: Evaluate math expression"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"f",
				"Format: Javascript"
			],
			[
				"page",
				"Package Control: Install Package"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 187.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/houfeng/Desktop/Dev/项目/jHelper/src/tween.js",
		"/Users/houfeng/Desktop/Dev/项目/jHelper/src/joop.js",
		"/Users/houfeng/Desktop/Dev/项目/mokit/mokit/scripts/page.js",
		"/Users/houfeng/Desktop/Dev/项目/mokit/mokit/scripts/main.js",
		"/Users/houfeng/Desktop/Dev/项目/mokit/mokit/$test/joop.js",
		"/Users/houfeng/Desktop/Dev/项目/mokit/mokit/index.js",
		"/Users/houfeng/Desktop/joop.js",
		"/Users/houfeng/Library/Application Support/Sublime Text 2/Packages/SublimeCodeIntel/Default (OSX).sublime-mousemap",
		"/Users/houfeng/Desktop/a.txt",
		"/Users/houfeng/Library/Application Support/Sublime Text 2/Packages/User/JavaScript.sublime-settings",
		"/Users/houfeng/Library/Application Support/Sublime Text 2/Packages/User/BracketHighlighter.sublime-settings",
		"/Users/houfeng/Library/Application Support/Sublime Text 2/Packages/User/sublime_tfs.sublime-settings",
		"/Users/houfeng/Desktop/desktop.ini",
		"/Users/houfeng/.viminfo"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"dlkafjlaskjf"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/joop.js",
					"settings":
					{
						"buffer_size": 14851,
						"regions":
						{
						},
						"selection":
						[
							[
								14631,
								14631
							]
						],
						"settings":
						{
							"rulers":
							[
								80
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 8.0,
						"translation.y": 7516.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 217.0
	},
	"output.jsconsole_view":
	{
		"height": 118.0
	},
	"output.jshint_view":
	{
		"height": 0.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"",
				"untitled"
			],
			[
				"un",
				"untitled"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 253.0,
	"status_bar_visible": true
}
